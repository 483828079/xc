server:
  port: 31200
spring:
  application:
    name: xc-service-manage-course
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/xc_course?characterEncoding=utf-8
      username: root
      password: 123
      driverClassName: com.mysql.jdbc.Driver
      initialSize: 5  #初始建立连接数量
      minIdle: 5  #最小连接数量
      maxActive: 20 #最大连接数量
      maxWait: 10000  #获取连接最大等待时间，毫秒
      testOnBorrow: true #申请连接时检测连接是否有效
      testOnReturn: false #归还连接时检测连接是否有效
      timeBetweenEvictionRunsMillis: 60000 #配置间隔检测连接是否有效的时间（单位是毫秒）
      minEvictableIdleTimeMillis: 300000  #连接在连接池的最小生存时间（毫秒）

  # jpa都是一些生成表的策略什么的。。。也用的dataSource
  # 会扫描@Entity注解的实体类和表建立关联，也可以设置主键的生成策略。
  jpa:
    show-sql: true # 显示sql
    properties:
      hibernate:
        format_sql: true # 格式化SQL


# mybatis整合只需要知道Mapper接口的位置
# 如果Mapper配置文件和Mapper接口路径一致不需要修改。
# @Mapper可以连Mapper接口配置都省了。
mybatis:
  type-aliases-package: com.xuecheng.framework.domain.course # 配置别名

pagehelper:
  helper-dialect: mysql  # mysql  pageHelper就是拼接分页sql语句的，所以要设置数据库类型。

eureka:
  client:
    registerWithEureka: true #服务注册开关
    fetchRegistry: true #服务发现开关
    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: ${EUREKA_SERVER:http://localhost:50101/eureka/,http://localhost:50102/eureka/}
  instance:
    prefer-ip-address:  true  # 将自己的ip地址注册到Eureka服务中
    ip-address: ${IP_ADDRESS:127.0.0.1} # 自己的ip
    instance-id: ${spring.application.name}:${server.port}  #指定实例id, name和端口号

# ribbon用来作客户端的负载均衡
ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000  #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间

course-publish:
  siteId: 5b30cba5f58b4411fc6cb1e5 # 站点ID
  templateId: 5a925be7b00ffc4b3c1578b5 # 模板实现决定好的。
  previewUrl: http://www.xuecheng.com/cms/preview/ # 用来拼接的预览页面。
  pageWebPath: /course/detail/
  pagePhysicalPath: /course/detail/ # 课程在站点目录的那个路径
  dataUrlPre: http://localhost:31200/course/courseview/ # 课程数据的请求URL